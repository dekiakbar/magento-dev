#!/usr/bin/env bash

# Reset
Color_Off='\033[0m'
# Regular Colors
GREEN='\033[0;32m'
# Background
On_Green='\033[42m'

function install()
{
  echo -e "${On_Green}Installing magento...${Color_Off}"
  docker-compose exec fpm bin/magento setup:install \
  --base-url=http://magento2.docker/ \
  --db-host=db.magento2.docker \
  --db-name=magento2 \
  --db-user=magento2 \
  --db-password=magento2 \
  --admin-firstname=admin \
  --admin-lastname=admin \
  --admin-email=admin@admin.com \
  --admin-user=admin \
  --admin-password=admin123 \
  --language=en_US \
  --currency=USD \
  --timezone=America/Chicago \
  --use-rewrites=1 \
  --search-engine=elasticsearch7 \
  --elasticsearch-host=elasticsearch.magento2.docker \
  --elasticsearch-port=9200 \
  --elasticsearch-index-prefix=magento2 \
  --elasticsearch-timeout=15
}

function dev-mode()
{
  echo -e "${On_Green}Activating developer mode...${Color_Off}"
  echo -e "Set magento developer mode"
  docker-compose exec fpm fpm  bin/magento deploy:mode:set developer --skip-compilation
  echo -e "Set cookie to 1 year"
  docker-compose exec fpm  bin/magento config:set web/cookie/cookie_lifetime 31536000
  echo -e "Set session to 1 year"
  docker-compose exec fpm  bin/magento config:set admin/security/session_lifetime 31536000
  echo -e "Disable admin security form key"
  docker-compose exec fpm  bin/magento config:set admin/security/use_form_key 0
  echo -e "Enable static symlink"
  docker-compose exec fpm  bin/magento config:set dev/template/allow_symlink 1
  echo -e "Disable static sign"
  docker-compose exec fpm  bin/magento config:set dev/static/sign 0
  echo -e "Disable Magento_TwoFactorAuth module"
  docker-compose exec fpm  bin/magento module:disable Magento_TwoFactorAuth
}

function clear-compiled()
{
  echo -e "${On_Green}Removing compiled code...${Color_Off}"
  echo -e "Removing generated/* directory"
  docker-compose exec fpm rm -rf generated/*
}

function clear-static()
{
  echo -e "${On_Green}Clear static content...${Color_Off}"
  echo -e "Removing var/cache directory"
  docker-compose exec fpm rm -rf var/cache/*
  echo -e "Removing var/page_cache directory"
  docker-compose exec fpm rm -rf var/page_cache/*
  echo -e "Removing var/view_preprocessed directory"
  docker-compose exec fpm rm -rf var/view_preprocessed/*
  echo -e "Removing pub/static directory"
  docker-compose exec fpm rm -rf pub/static/*
}

function clear-cache()
{
  echo -e "${On_Green}Clearing cache...${Color_Off}"
  docker-compose exec fpm bin/magento cache:flush
  docker-compose exec fpm bin/magento cache:clean
}

function fullupgrade ()
{
  echo -e "${On_Green}Running fullupgrade...${Color_Off}"
  echo -e "Running setup:upgrade..."
  docker-compose exec fpm bin/magento setup:upgrade
  echo -e "Running setup:di:compile..."
  docker-compose exec fpm bin/magento setup:di:compile
  echo -e "Running setup:static-content:deploy..."
  docker-compose exec fpm bin/magento setup:static-content:deploy -f
}

function rebuild-container()
{
  echo -e "${On_Green}Rebuild all container...${Color_Off}"
  echo -e "Running docker-compose up --build --force-recreate --no-deps --remove-orphans -d"
  docker-compose up --build --force-recreate --no-deps --remove-orphans -d
}

function install-sample-data()
{
  echo -e "${On_Green}Installing sample data...${Color_Off}"
  echo -e "Running bin/magento sampledata:deploy"
  docker-compose exec fpm bin/magento sampledata:deploy
  fullupgrade
}

function magento()
{
  # docker-compose exec fpm bin/magento 
  echo "$@"
}

function magento-docker()
{
  docker-compose exec fpm bin/magento-docker
}

function ece-docker()
{
  docker-compose exec fpm ./vendor/bin/ece-docker
}

function cs()
{
  docker-compose exec fpm ./vendor/bin/phpcs
}

function cbf()
{
  docker-compose exec fpm ./vendor/bin/phpcbf
}

# start custom script
set -e

USAGE="Development script

\033[33mArguments:\033[0m
  fullupgrade           Run upgrade, compile, and deploy static content.
  clear-static          Remove static content.
  clear-compiled        Remove compiled php code.
  install               Install magento site.
  dev-mode              Set magento to developer mode.
  clear-cache           Clear magento cache
  rebuild-container     Rebuild container image
  install-sample-data   Install sample data
  magento               Run bin/magento command. ie: bin/manager magento cache:flush
  magento-docker        Run bin/magento-docker command. ie: bin/manager magento-docker --help
  ece-docker            Run ./vendor/bin/ece-docker command. ie: bin/manager ece-docker --help
  cs                    Run ./vendor/bin/phpcs command (Coding standard). ie: bin/manager cs --help
  cbf                   Run ./vendor/bin/phpcbf command (Auto fix Coding standard). ie: bin/manager cbf --help
\n"

case "$1" in
  fullupgrade)
    fullupgrade
    ;;
  clear-static)
    clear-static
    ;;
  clear-compiled)
    clear-compiled
    ;;
  install)
    install
    ;;
  dev-mode)
    dev-mode
    ;;
  clear-cache)
    clear-cache
    ;;
  rebuild-container)
    rebuild-container
    ;;
  install-sample-data)
    install-sample-data
    ;;
  magento)
    docker-compose exec fpm bin/magento "${*:2}"
    ;;
  magento-docker)
    docker-compose exec fpm bin/magento-docker "${*:2}"
    ;;
  ece-docker)
    docker-compose exec fpm ./vendor/bin/ece-docker "${*:2}"
    ;;
  cs)
    docker-compose exec fpm ./vendor/bin/phpcs "${*:2}"
    ;;
  cbf)
    docker-compose exec fpm ./vendor/bin/phpcbf "${*:2}"
    ;;
  *)
    printf "$USAGE"
    exit 0
    ;;
esac